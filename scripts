 Scripts
 // Fixed the schema validation test to include additional fields
 pm.test("Validate the booking object schema", function () {
 const responseData = pm.response.json();
 pm.expect(responseData).to.be.an('object');
 pm.expect(responseData.booking).to.exist.and.to.be.an('object');
 pm.expect(responseData.booking.firstname).to.exist.and.to.be.a('string');
 pm.expect(responseData.booking.lastname).to.exist.and.to.be.a('string');
 pm.expect(responseData.booking.totalprice).to.exist.and.to.be.a('number');
 pm.expect(responseData.booking.depositpaid).to.exist.and.to.be.a('boolean');
 pm.expect(responseData.booking.bookingdates).to.exist.and.to.be.an('object');
 pm.expect(responseData.booking.bookingdates.checkin).to.exist.and.to.be.a('string');
 pm.expect(responseData.booking.bookingdates.checkout).to.exist.and.to.be.a('string');
 pm.expect(responseData.booking.additionalneeds).to.exist.and.to.be.a('string');
 pm.expect(responseData.bookingid).to.exist.and.to.be.a('number');
 });
 pm.test("Response status code is 200", function () {
 pm.expect(pm.response.code).to.equal(200);
 });
 pm.test("Content-Type is application/json", function () {
 pm.expect(pm.response.headers.get("Content-Type")).to.include("application/json");
 });
 pm.test("Booking ID should be a number", function () {
 const responseData = pm.response.json();
    pm.expect(responseData.bookingid).to.be.a('number');
 });
 pm.test("First name is a non-empty string", function () {
  const responseData = pm.response.json();
  pm.expect(responseData).to.be.an('object');
  pm.expect(responseData.booking.firstname).to.be.a('string').and.to.have.lengthOf.at.least(1, "First name should not be empty");
 });
 pm.test("Last name is a non-empty string", function () {
  const responseData = pm.response.json(); 
  pm.expect(responseData).to.be.an('object');
  pm.expect(responseData.booking.lastname).to.be.a('string').and.to.have.lengthOf.at.least(1, "Last name should not be empty");
 });
 var template = `
 <canvas id="myChart" height="75"></canvas>
 <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js"></script> 
<script>
  var ctx = document.getElementById("myChart");
    var myChart = new Chart(ctx, {
        type: "bar",
        data: {
            labels: ["Firstname", "Lastname", "Total Price", "Deposit Paid", "Checkin", "Checkout", "Additional Needs"],
            datasets: [{
                data: [{{response.booking.firstname.length}}, {{response.booking.lastname.length}}, {{response.booking.totalprice}}, {{response.booking.depositpaid ? 1 : 
0}}, {{response.booking.bookingdates.checkin.length}}, {{response.booking.bookingdates.checkout.length}}, {{response.booking.additionalneeds.length}}],
                // Change these colours to customize the chart
                backgroundColor: ["#003f5c", "#58508d", "#bc5090", "# 6361", "# a600", "#003f5c", "#58508d"],
            }]
        },
        options: {
            legend: { display: false },
            title: {
                display: true,
                text: 'Booking Information'
            },
            scales: {
                xAxes: [{
                    display: true,
                    scaleLabel: {
                        display: true,
                        labelString: 'Details'
                    }
                }],
                yAxes: [{
                    display: true,
                    scaleLabel: {
                        display: true,
                        labelString: 'Length'
                    }
                }]
            }
        }
    });
    // Access the data passed to pm.visualizer.set() from the JavaScript
    // code of the Visualizer template
    pm.getData(function (err, value) {
        myChart.update();
});
 </script>`;
 function constructVisualizerPayload() {
 var res = pm.response.json();
 return {response: res};
 }
 pm.visualizer.set(template, constructVisualizerPayload());
 pm.test("Status code is 200", function () {
 pm.response.to.have.status(200);
 });
 pm.test("Status code is 200", function () {
 pm.response.to.have.status(200);
 });
 pm.test("Status code is 200", function () {
 pm.response.to.have.status(200);
 });
 pm.test("Status code is 200", function () {
 pm.response.to.have.status(200);
 });
 pm.test("Validate the booking object schema", function () {
 const responseData = pm.response.json();
 pm.expect(responseData).to.be.an('object');
    pm.expect(responseData.booking).to.exist.and.to.be.an('object');
    pm.expect(responseData.booking.firstname).to.exist.and.to.be.a('string');
    pm.expect(responseData.booking.lastname).to.exist.and.to.be.a('string');
    pm.expect(responseData.booking.totalprice).to.exist.and.to.be.a('number');
    pm.expect(responseData.booking.depositpaid).to.exist.and.to.be.a('boolean');
    pm.expect(responseData.booking.bookingdates).to.exist.and.to.be.an('object');
    pm.expect(responseData.booking.bookingdates.checkin).to.exist.and.to.be.a('string');
    pm.expect(responseData.booking.bookingdates.checkout).to.exist.and.to.be.a('string');
    pm.expect(responseData.booking.additionalneeds).to.exist.and.to.be.a('string');
 });
 pm.test("Response status code is 200", function () {
    pm.response.to.have.status(200);
 });
 pm.test("Content-Type is application/json", function () {
    pm.expect(pm.response.headers.get("Content-Type")).to.include("application/json");
 });
 pm.test("Booking ID should be a number", function () {
    const responseData = pm.response.json();
    pm.expect(responseData.bookingid).to.be.a('number');
 });
 pm.test("First name is a non-empty string", function () {
    const responseData = pm.response.json();
    pm.expect(responseData).to.be.an('object');
 pm.expect(responseData.booking.firstname).to.be.a('string').and.to.have.lengthOf.at.least(1, "First name should not be empty");
})

